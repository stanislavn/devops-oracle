# Dockerfile.cron
FROM python:3.12.4-slim

# Environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Working directory
WORKDIR /app

# Install necessary tools for backup tasks
# For envsubst command we need gettext-base
RUN apt-get update && apt-get install -y --no-install-recommends \
    cron \
    postgresql-client \
    tar \
    gzip \
    rclone \
    gettext-base \
    && rm -rf /var/lib/apt/lists/*  # Clean up to reduce image size

# Copy application code and install dependencies
COPY requirements.txt /app/
RUN pip install --no-cache-dir -r requirements.txt

# Copy backup script and make it executable
COPY backup.sh /app/backup.sh
RUN chmod +x /app/backup.sh

# Copy rclone configuration template
RUN mkdir -p /root/.config/rclone
COPY rclone.conf.template /root/.config/rclone/rclone.conf.template

# Copy rclone setup script
COPY setup-rclone.sh /setup-rclone.sh
RUN chmod +x /setup-rclone.sh

# Create crontab file
RUN echo "0 2 * * * /app/backup.sh >> /var/log/cron.log 2>&1" > /etc/cron.d/backup-cron
RUN echo "0 4 * * * cd /app && python project/manage.py cleanup_logs --days=7 >> /var/log/management_commands.log 2>&1" >> /etc/cron.d/backup-cron
RUN echo "0 1 * * * PGPASSWORD=\$POSTGRES_PASSWORD pg_dump -h db -U \$POSTGRES_USER \$POSTGRES_DB | gzip > /backups/db_backup_\$(date +\%Y\%m\%d_\%H\%M\%S).sql.gz" >> /etc/cron.d/backup-cron
RUN chmod 0644 /etc/cron.d/backup-cron
RUN crontab /etc/cron.d/backup-cron

# Create log file
RUN touch /var/log/cron.log

# Copy the entire codebase (if needed for Django management commands)
COPY . /app/

# Run setup-rclone script to configure rclone, then start cron in foreground
CMD ["/bin/bash", "-c", "/setup-rclone.sh && cron -f"]