version: '3.8'

services:
  web:
    build: .
    expose:
      - "80"
    env_file:
      - .env.prod
    volumes:
      - ./:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/admin/login/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  db:
    image: postgres:14
    env_file:
      - .env.prod
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}

  redis:
    image: redis:7-alpine
    restart: always
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  celery-worker:
    build: .
    restart: always
    command: celery -A project worker --loglevel=info
    volumes:
      - ./:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - .env.prod
    depends_on:
      web:
        condition: service_started
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery-beat:
    build: .
    restart: always
    command: celery -A project beat --scheduler django_celery_beat.schedulers:DatabaseScheduler --loglevel=info
    volumes:
      - ./:/app
    env_file:
      - .env.prod
    depends_on:
      web:
        condition: service_started
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  nginx:
    image: nginx:1.21-alpine
    restart: always
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./nginx:/etc/nginx/conf.d
    ports:
      - "80:80"
    depends_on:
      web:
        condition: service_started

volumes:
  postgres_data:
    name: postgres_data
    external: true
  static_volume:
  media_volume:
  redis_data: