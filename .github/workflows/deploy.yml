name: Deploy Django App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1) (Optional) Check out code in GitHub Actions (useful for artifact references).
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) Configure SSH on the Actions runner
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Optional: Add VPS host to known_hosts
          # ssh-keyscan -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts

      # 3) Deploy to VPS
      - name: Deploy to VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOSSH'
          set -eu

          # Navigate to the deploy folder
          cd /home/ubuntu/django-app/devops-oracle

          # If you haven't cloned the git repo yet, clone it. If you have, just pull updates.
          if [ ! -d ".git" ]; then
            echo "Cloning repository for the first time..."
            git clone git@github.com:YOUR_GITHUB_USER/REPO_NAME.git .
          fi

          # Pull latest changes from main
          git fetch origin main
          git reset --hard origin/main

          # Ensure production env folder exists
          mkdir -p .envs/.production

          # Create .django if it doesn't exist
          if [ ! -f ".envs/.production/.django" ]; then
            echo "Creating Django environment file..."
            echo "DJANGO_SECRET_KEY=YourDjangoSecretKey" >> .envs/.production/.django
            echo "DJANGO_ALLOWED_HOSTS=yourdomain.com" >> .envs/.production/.django
            # Add more if needed
          fi

          # Create .postgres if it doesn't exist
          if [ ! -f ".envs/.production/.postgres" ]; then
            echo "Creating Postgres environment file..."
            echo "POSTGRES_USER=postgres" >> .envs/.production/.postgres
            echo "POSTGRES_PASSWORD=YourPostgresPassword" >> .envs/.production/.postgres
            # Add more if needed
          fi

          # Move into the folder that holds docker-compose.production.yml
          cd my_project

          # Build and start containers in detached mode
          docker-compose -f docker-compose.production.yml up -d --build

          echo "Deployment complete!"
          EOSSH